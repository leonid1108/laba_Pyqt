# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'src/register.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import sys, os, binascii


class Ui_Dialog_register(object):
    def check(self):
       login, password, index = 0, 0, 0
       flag = True
       with open("src/password.txt", "r+") as file:
           lines = file.readlines()
           for line in lines:
               if self.lineEdit.text() == (binascii.unhexlify(line.replace("\n", ""))).decode('UTF-8'):
                   login = index
                   if self.lineEdit_2.text() != (binascii.unhexlify(lines[login+1].replace("\n", ""))).decode('UTF-8'):
                       index += 2
                       continue
                   else:
                       flag = False
                       Dialog_lk.show()
                       Dialog_register.hide()
                       self.lineEdit.setText("")
                       self.lineEdit_2.setText("")
                       Ok = QMessageBox()
                       Ok.setWindowTitle("Вы успешно вошли в личный кабинет")
                       Ok.setText("Вход прошел успешно!")
                       Ok.setWindowIcon(QIcon("src/ok.png"))
                       Ok.setIcon(QMessageBox.Information)
                       Ok.exec_()
                       break
               index += 1
           if flag:
               error_lk = QMessageBox()
               error_lk.setWindowTitle("Error")
               error_lk.setText("Пользователь не найден.\nСоздайте аккаунт.")
               error_lk.setWindowIcon(QIcon("src/warning.png"))
               error_lk.setIcon(QMessageBox.Warning)
               error_lk.exec_()

    def xtea_encryption(self):
        def xtea_encipher(num_rounds, v, k):
            v0 = int(v[0])
            v1 = int(v[1])
            summ, delta = 0, 0x9e3779b9
            for i in range(num_rounds):
                v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (summ + k[summ & 3])
                summ = (summ + delta)
                v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (summ + k[(summ >> 11) & 3])
            v[0] = v0
            v[1] = v1
            return v
        def xtea_decipher(num_rounds, v, k):
            v0 = int(v[0])
            v1 = int(v[1])
            delta = 0x9e3779b9
            summ = (delta * (-num_rounds))
            for i in range(num_rounds):
                v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (summ + k[(summ >> 11) & 3])
                summ = (summ - delta)
                v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (summ + k[summ & 3])
            v[0] = v0
            v[1] = v1
            return v
        login = self.lineEdit.text().encode()
        password = self.lineEdit_2.text().encode()

        login_encryption = (binascii.hexlify(login)).decode('UTF-8')
        password_encryption = (binascii.hexlify(password)).decode('UTF-8')

        element_login = int(("0x" + login_encryption), 0)
        element_password = int(("0x" + password_encryption), 0)

        coded_login = xtea_encipher(64, [element_login, element_login, element_login, element_login],
        [0x12345678, 0x00ff00ff, 0x1111aaaa, 0x1010ffcc, 0x12345678, 0x00ff00ff, 0x1111aaaa, 0x1010ffcc])

        coded_password = xtea_encipher(64, [element_password, element_password, element_password, element_password],
        [0x12345678, 0x00ff00ff, 0x1111aaaa, 0x1010ffcc, 0x12345678, 0x00ff00ff, 0x1111aaaa, 0x1010ffcc])

        result_login = "{:x}".format(coded_login[-1])
        result_password = "{:x}".format(coded_password[-1])

        with open("src/password.txt", "r+") as file:
            lines = file.readlines()
            flag = True
            for line in lines:
                if self.lineEdit.text() == (binascii.unhexlify(line.replace("\n", ""))).decode('UTF-8'):
                   flag = False
            if flag:
                file.write(f"\n{result_login}\n")
                file.write(f"{result_password}")
                Ok = QMessageBox()
                Ok.setWindowTitle("Вы зарегистрировались")
                Ok.setText("Регистрация прошла успешно!")
                Ok.setWindowIcon(QIcon("src/ok.png"))
                Ok.setIcon(QMessageBox.Information)
                Ok.exec_()
            else:
                error = QMessageBox()
                error.setWindowTitle("Error")
                error.setText("Пользователь с данным именем уже существует.")
                error.setWindowIcon(QIcon("src/warning.png"))
                error.setIcon(QMessageBox.Warning)
                error.exec_()
        self.lineEdit.setText("")
        self.lineEdit_2.setText("")
        self.label_2.setText("Войдите в аккаунт")
    def setupUi(self, Dialog_register):
        Dialog_register.setObjectName("Регистрация")
        Dialog_register.setFixedSize(1120, 880)
        Dialog_register.setStyleSheet("background-color: rgb(0, 170, 255);\n""border-radius: 10px;")
        Dialog_register.setWindowIcon(QtGui.QIcon('src/register.png'))

        self.label = QtWidgets.QLabel(Dialog_register)
        self.label.setGeometry(QtCore.QRect(480, 40, 200, 200))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("src\\logo.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")

        self.frame = QtWidgets.QFrame(Dialog_register)
        self.frame.setGeometry(QtCore.QRect(280, 270, 600, 511))
        self.frame.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.frame.setAutoFillBackground(False)
        self.frame.setStyleSheet("\n""background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setEnabled(True)
        self.label_2.setGeometry(QtCore.QRect(90, 50, 421, 61))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(28)
        self.label_2.setFont(font)
        self.label_2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label_2.setMouseTracking(False)
        self.label_2.setFocusPolicy(QtCore.Qt.NoFocus)
        self.label_2.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setAcceptDrops(False)
        self.label_2.setAlignment(Qt.AlignCenter)
        self.label_2.setAutoFillBackground(False)
        self.label_2.setIndent(25)
        self.label_2.setOpenExternalLinks(False)
        self.label_2.setObjectName("label_2")

        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(90, 160, 421, 41))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.lineEdit.setStyleSheet("background-color: rgb(204, 204, 204);\n"
                                    "padding-left: 8px;")
        self.lineEdit.setObjectName("lineEdit")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(90, 220, 421, 41))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(10)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.lineEdit_2.setStyleSheet("background-color: rgb(204, 204, 204);\n"
        "padding-left: 8px;\n""\n""")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(90, 370, 421, 51))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("background-color: rgb(255, 76, 76);")
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setGeometry(QtCore.QRect(90, 300, 421, 51))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI Semilight")
        font.setPointSize(12)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 76, 76);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.retranslateUi(Dialog_register)
        QtCore.QMetaObject.connectSlotsByName(Dialog_register)

        self.pushButton_2.clicked.connect(self.check)
        self.pushButton.clicked.connect(self.xtea_encryption)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Авторизация"))
        self.label_2.setText(_translate("Dialog", "Создать аккаунт"))
        self.lineEdit.setPlaceholderText(_translate("Dialog", "Имя пользователя"))
        self.lineEdit_2.setPlaceholderText(_translate("Dialog", "Пароль"))
        self.pushButton.setText(_translate("Dialog", "Зарегистрироваться"))
        self.pushButton_2.setText(_translate("Dialog", "Войти"))

class Ui_Dialog_lk(object):
    def encryption_in_lk(self):
        def xtea_encipher(num_rounds, v, k):
            v0 = int(v[0])
            v1 = int(v[1])
            summ, delta = 0, 0x9e3779b9
            for i in range(num_rounds):
                v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (summ + k[summ & 3])
                summ = (summ + delta)
                v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (summ + k[(summ >> 11) & 3])
            v[0] = v0
            v[1] = v1
            return v
        if self.lineEdit.text() == "":
            error = QMessageBox()
            error.setWindowTitle("Error")
            error.setText("Нечего шифровать!\nПожалуйста напишите что-нибудь.")
            error.setWindowIcon(QIcon("src/warning.png"))
            error.setIcon(QMessageBox.Warning)
            error.exec_()
        else:
            text = self.lineEdit.text().encode()
            text_encryption = (binascii.hexlify(text)).decode('UTF-8')
            element = int(("0x" + text_encryption), 0)
            coded_login = xtea_encipher(64, [element, element, element, element],
            [0x12345678, 0x00ff00ff, 0x1111aaaa, 0x1010ffcc, 0x12345678, 0x00ff00ff, 0x1111aaaa, 0x1010ffcc])
            result_text = "{:x}".format(coded_login[-1])
            self.lineEdit_2.setText(f"{result_text}")
            with open("src/message_in_lk.txt", "r+") as file:
                file.write(f"{self.lineEdit_2.text()}")
    def decryption_in_lk(self):
        try:
            if self.lineEdit.text() == "":
                error = QMessageBox()
                error.setWindowTitle("Error")
                error.setText("Нечего расшифровать!\nПожалуйста напишите что-нибудь.")
                error.setWindowIcon(QIcon("src/warning.png"))
                error.setIcon(QMessageBox.Warning)
                error.exec_()
            else:
                text = self.lineEdit.text()
                self.lineEdit_2.setText(f"{(binascii.unhexlify(text)).decode('UTF-8')}")
                with open("src/message_in_lk.txt", "r+") as file:
                    file.write(f"{self.lineEdit_2.text()}\n")
        except ValueError:
            error = QMessageBox()
            error.setWindowTitle("Error")
            error.setText("Строковый аргумент должен содержать только символы ASCII.")
            error.setWindowIcon(QIcon("src/warning.png"))
            error.setIcon(QMessageBox.Warning)
            error.exec_()
    def download_file(self):
        file_name = QtWidgets.QFileDialog.getOpenFileName(None, 'Open File', "F:\ ", "Text Files (*.txt)")
        with open(f"{file_name[0]}", "r") as file:
            data = file.read()
            self.lineEdit.setText(f"{data}")
    def setupUi(self, Dialog_lk):
        Dialog_lk.setObjectName("Dialog")
        Dialog_lk.resize(750, 550)
        Dialog_lk.setWindowIcon(QtGui.QIcon('src/user-interface.png'))
        Dialog_lk.setStyleSheet("background-color: rgb(22, 87, 166);\n""border-radius: 10px;")

        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog_lk)
        self.lineEdit_2.setGeometry(QtCore.QRect(50, 370, 581, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("background-color: rgb(31, 130, 243);\n""padding-left: 8px;")
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.pushButton = QtWidgets.QPushButton(Dialog_lk)
        self.pushButton.setGeometry(QtCore.QRect(240, 190, 180, 35))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("background-color: rgb(170, 170, 255);")
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(Dialog_lk)
        self.pushButton_2.setGeometry(QtCore.QRect(450, 190, 180, 35))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setStyleSheet("background-color: rgb(170, 170, 255);")
        self.pushButton_2.setObjectName("pushButton_2")

        self.lineEdit = QtWidgets.QLineEdit(Dialog_lk)
        self.lineEdit.setGeometry(QtCore.QRect(50, 110, 581, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(31, 130, 243);\n""padding-left: 8px;")
        self.lineEdit.setObjectName("lineEdit")

        self.pushButton_3 = QtWidgets.QPushButton(Dialog_lk)
        self.pushButton_3.setGeometry(QtCore.QRect(640, 490, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_3.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QtWidgets.QPushButton(Dialog_lk)
        self.pushButton_4.setGeometry(QtCore.QRect(550, 250, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_4.setStyleSheet("background-color: rgb(255, 85, 127);")
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(Dialog_lk)
        self.pushButton_5.setGeometry(QtCore.QRect(450, 250, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_5.setStyleSheet("background-color: rgb(247, 217, 200);")
        self.pushButton_5.setObjectName("pushButton_5")

        self.retranslateUi(Dialog_lk)
        QtCore.QMetaObject.connectSlotsByName(Dialog_lk)

        self.pushButton.clicked.connect(self.encryption_in_lk)
        self.pushButton_2.clicked.connect(self.decryption_in_lk)
        self.pushButton_4.clicked.connect(self.cls_field)
        self.pushButton_3.clicked.connect(self.close_form)
        self.pushButton_5.clicked.connect(self.download_file)
    def close_form(self):
        Dialog_lk.hide()
        Dialog_register.show()
    def cls_field(self):
        self.lineEdit.setText("")
        self.lineEdit_2.setText("")

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Личный кабинет"))
        self.pushButton.setText(_translate("Dialog", "Зашифровать"))
        self.pushButton_2.setText(_translate("Dialog", "Расшифровать"))
        self.pushButton_3.setText(_translate("Dialog", "Выход"))
        self.pushButton_4.setText(_translate("Dialog", "Очистить"))
        self.pushButton_5.setText(_translate("Dialog", "Загрузить"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    Dialog_register = QtWidgets.QDialog()
    Dialog_lk = QtWidgets.QDialog()

    regui = Ui_Dialog_register()
    lkui = Ui_Dialog_lk()

    regui.setupUi(Dialog_register)
    lkui.setupUi(Dialog_lk)

    Dialog_register.show()
    sys.exit(app.exec_())
